#pragma once

#include "Macros.hpp"

#ifndef NDEBUG
#define GL_SUPERVISOR_SCOPE() birb::gl_supervisor UNIQUE_NAME(scoped_gl_error_supervisor);
#else
#define GL_SUPERVISOR_SCOPE()
#endif

namespace birb
{
	/**
	 * @class gl_supervisor
	 * @brief Scoped OpenGL error checker
	 *
	 * Checks for OpenGL errors during construction and destruction
	 *
	 * If the error gets detected at the start of the function,
	 * that means that the error was generated by something that happened
	 * before the currently executing function was called.
	 *
	 * If an error is at the end of the function, the error was caused
	 * in the current scope
	 *
	 * If profiling is enabled, the profiling macros will
	 * automatically use this scoped error checker
	 */
	class gl_supervisor
	{
	public:
		gl_supervisor();
		~gl_supervisor();
		gl_supervisor(const gl_supervisor&) = delete;
		gl_supervisor(gl_supervisor&) = delete;
		gl_supervisor(gl_supervisor&&) = delete;

	private:

	};
}
